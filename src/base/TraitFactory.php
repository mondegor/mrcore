<?php declare(strict_types=1);
namespace mrcore\base;

/**
 * Код используется в классах, которые имеют наследников и объекты
 * которых создаются динамически, т.е. заренее не известно когда они
 * будут созданы и будут ли созданы вообще.
 *
 * :WARNING: данный код ДОЛЖЕН подключаться с объявлением и определением в классе
 *           свойства $defaultNamespace, шаблон данного свойства указан ниже
 *
 * @author  Andrey J. Nazarov
 */
trait TraitFactory
{
    /**
     * Namespace по умолчанию используемой в TraitFactory::factory(),
     * для подстановки в $class если в нём не был указан свой namespace.
     */
    // private static string $defaultNamespace = '';

    #################################### Methods #####################################

    /**
     * Метод для создания объектов наследуемых от класса в который внедрён данный трейт.
     * Перед созданием объекта подключается его файл с классом указанным в $class.
     * Если в значении $class отсуствует символ \, то считается, что подключаемый
     * класс располагается в том же пакете, что и класс с внедрённым трейтом,
     * поэтому к $class будет доавлен путь к пакету.
     * Если создаваемый объект не является наследником класса с внедрённым трейтом,
     * то сформируется сообщение об ошибке с аварийным завершением работы скрипта.
     *
     * @param  string     $class (Class) or (\package\Class)
     * @param  array|null $params [mixed, ...]
     */
    public static function factory(string $class, array $params = null): self
    {
        // в случае отсутствия символа \\ будет добавлен namespace текущего класса в качестве приставки
        if (!str_contains($class, '\\'))
        {
            $class = self::$defaultNamespace . '\\' . $class;
        }

        if (null === $params)
        {
            return new $class();
        }

        return new $class(...$params);
    }

}